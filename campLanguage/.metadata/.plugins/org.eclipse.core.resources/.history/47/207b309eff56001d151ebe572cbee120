package kodlama.io.language.business.concretes;

import java.util.List;

import kodlama.io.language.business.abstracts.LanguageService;
import kodlama.io.language.dataAccess.abstracts.LanguageRepository;
import kodlama.io.language.entities.concretes.Language;

public class LanguageManager implements LanguageService {

	private LanguageRepository languageRepository;

	public LanguageManager(LanguageRepository languageRepository) {

		this.languageRepository = languageRepository;
	}

	@Override
	public List<Language> getAll() {
		// iş kuralları
		return languageRepository.getAll();
	}

	@Override
	public void add(Language language) {

		for (Language language2 : languageRepository.getAll()) {
			if (language.getName().equalsIgnoreCase(language2.getName())) {
				throw new Exception("");
				return true;
			}
			
		}
		this.languageRepository.add(language);
	}

	@Override
	public void update(Language language) {

		for (Language language2 : languageRepository.getAll()) {
			if (language2.getId() == language.getId()) {
				languageRepository.update(language, language.getId());
			}
		}
	}

	@Override
	public void delete(Language language, int id) throws Exception {
		if(!isIdExist(id)) 
			throw new Exception("İd bulunamadı.");
        languageRepository.delete(id);

	}

	@Override
	public Language getById(int id) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public boolean isNameExist(Language language){
        for(Language language1: getAll()){
            if(language.getName().equalsIgnoreCase(language1.getName())){
                return true;
            }
        }return false;

    }
    public boolean isIdExist(int id){
        for (Language language1: getAll()){
            if (language1.getId()==id){
                return true;
            }
        }return false;

    }

}
